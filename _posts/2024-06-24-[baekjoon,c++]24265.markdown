---
layout: post
title:  "[백준/C++] 24265번 알고리즘 수업-알고리즘의 수행 시간 4"
date:   "2024-06-24 00:00:00 +0900"
#last_modified_at: "2024-05-03 00:00:00 +0900"
categories: ["백준", "알고리즘"]
tags: ["cpp", "브론즈3"]
---

### 문제 설명
오늘도 서준이는 알고리즘의 수행시간 수업 조교를 하고 있다. 아빠가 수업한 내용을 학생들이 잘 이해했는지 문제를 통해서 확인해보자.

입력의 크기 n이 주어지면 MenOfPassion 알고리즘 수행 시간을 예제 출력과 같은 방식으로 출력해보자.

MenOfPassion 알고리즘은 다음과 같다.

```c++
MenOfPassion(A[], n) {
    sum <- 0;
    for i <- 1 to n - 1
        for j <- i + 1 to n
            sum <- sum + A[i] × A[j];// 코드1
    return sum;
}
```

### 입력
첫째 줄에 입력의 크기 n(1 ≤ n ≤ 500,000)이 주어진다.

### 출력
첫째 줄에 코드1 의 수행 횟수를 출력한다.

둘째 줄에 코드1의 수행 횟수를 다항식으로 나타내었을 때, 최고차항의 차수를 출력한다. 단, 다항식으로 나타낼 수 없거나 최고차항의 차수가 3보다 크면 4를 출력한다.

### 입출력 예
![problem_ex](/assets/img/24265_ex.png)

코드1 이 21회 수행되고 알고리즘의 수행 시간이 n^2에 비례한다.

---

### 내 코드
```c++
#include<iostream>
using namespace std;

int main(){
    long int n;
    cin >> n;
    cout << n*(n-1)/2 << "\n" << "2";
}
```
---

### Review
i는 1부터 n-1까지이고 j는 i+1부터 n까지
<br/>i=1일 때, j는 2부터 n까지 (n-1)
<br/>i=2일 때, j는 3부터 n까지 (n-2)
<br/>i=3일 때, j는 4부터 n까지 (n-3)
<br/>....
<br/>i=n-3일 때, j는 n-2부터 n까지
<br/>i=n-2일 때, j는 n-1부터 n까지
<br/>i=n-1일 때, j는 n부터 n까지

<br/>모두 더하게 된다면 1+2+3+...+(n-3)+(n-2)+(n-1)으로,
<br/>등차수열의 합공식을 이용해서 
<br/>(n-1)*n/2이 된다. 
<br/>따라서 시간복잡도는 O(n^2)

**출처:** 백준, https://www.acmicpc.net/problem/24265